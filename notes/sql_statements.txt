DROP TABLE threads;
DROP TABLE tickets;
DROP TABLE cpersonals;
DROP TABLE tpersonals;
DROP TABLE clients;
DROP TABLE technicians;

CREATE TABLE clients(
cid BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
phone VARCHAR(255) UNIQUE,
email VARCHAR(255) UNIQUE,
password VARCHAR(255),
rating INT(4) DEFAULT 500);

CREATE TABLE cpersonals(
cid BIGINT UNSIGNED AUTO_INCREMENT,
first_name VARCHAR(255),
last_name VARCHAR(255),
address VARCHAR(255) DEFAULT 'Not Provided',
city VARCHAR(255) DEFAULT 'Not Provided',
state VARCHAR(100) DEFAULT 'NA',
zip VARCHAR(16),
birth_year INT(5) DEFAULT '1899',
birth_month VARCHAR(10) DEFAULT 'January',
birth_day INT(3) DEFAULT '1',
bio TEXT,
lang_pref VARCHAR(64) DEFAULT 'Not Provided',
time_zone VARCHAR(64) DEFAULT 'Not Provided',
launch_email INT(1) DEFAULT 0,
email_verify INT(1) DEFAULT 0,
prof_pic LONGBLOB NULL,
reg_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY(cid),
FOREIGN KEY(cid) REFERENCES clients(cid));

CREATE TABLE technicians(
tid BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
phone VARCHAR(255) UNIQUE,
email VARCHAR(255) UNIQUE,
password VARCHAR(255),
rating INT(4) DEFAULT 500);

CREATE TABLE tpersonals(
tid BIGINT UNSIGNED AUTO_INCREMENT,
first_name VARCHAR(255),
last_name VARCHAR(255),
address VARCHAR(255),
city VARCHAR(255),
state VARCHAR(100),
zip VARCHAR(16),
birth_year INT(5) DEFAULT '1800',
birth_month VARCHAR(10) DEFAULT 'January',
birth_day INT(3) DEFAULT '1',
linked_in VARCHAR(255),
bio TEXT,
lang_pref VARCHAR(64) DEFAULT 'Not Provided',
time_zone VARCHAR(64) DEFAULT 'Not Provided',
launch_email INT(1) DEFAULT 0,
email_verify INT(1) DEFAULT 0,
prof_pic LONGBLOB NULL,
tags TEXT,
signature VARCHAR(255),
reg_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY(tid),
FOREIGN KEY(tid) REFERENCES technicians(tid));

CREATE TABLE tickets(
qid BIGINT UNSIGNED AUTO_INCREMENT,
cid BIGINT UNSIGNED,
tid BIGINT UNSIGNED,
difficulty INT(2) DEFAULT 0,
priority INT(4) DEFAULT 500,
time_stamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
solved INT(1) DEFAULT 0,
pending INT(1) DEFAULT 0,
archived INT(1) DEFAULT 0,
title VARCHAR(60),
tags TEXT,
answer TEXT,
PRIMARY KEY (qid),
FOREIGN KEY(tid) REFERENCES technicians(tid),
FOREIGN KEY(cid) REFERENCES clients(cid));

CREATE TABLE threads(
thrid BIGINT UNSIGNED AUTO_INCREMENT,
qid BIGINT UNSIGNED,
cid BIGINT UNSIGNED,
tid BIGINT UNSIGNED,
body TEXT,
img LONGBLOB NULL, 
caption VARCHAR(255) NULL, 
answered int(1) DEFAULT 0,
PRIMARY KEY (thrid),
FOREIGN KEY(qid) REFERENCES tickets(qid),
FOREIGN KEY(tid) REFERENCES technicians(tid),
FOREIGN KEY(cid) REFERENCES clients(cid));

DROP TABLE contact;

CREATE TABLE contact(
contact_id BIGINT UNSIGNED AUTO_INCREMENT,
uid BIGINT UNSIGNED,
email VARCHAR(255),
message TEXT, 
PRIMARY KEY (contact_id));




-->tags will be seperated by commas, just parse through them
-->"pending", client would decide if question is answered
-->"room" feature would just be the "ticket room", and would share the qid
-->In Python, execute INSERT to create a new response in the thread of conversation
-->could store messages, calls, pictures, video, etc (eventually) 
-->INSERT INTO thread (thrid, qid, cid, body, , , , ,)
-->VALUES (value1, value2, value3, ...);

-->Then in Django, iterate through each of the threads assigned to the qid, and print them out in a FOR loop
-->The answer bit is set that specific thread statement as the answer

-->Currently the prof_pic BLOB is just holding the URL


-->change the default layout of the entries
$ SELECT * FROM sometable\G